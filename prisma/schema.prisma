generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  isVerified    Boolean      @default(false)
  accounts      Account[]
  rooms         Room[]
  roomBan       RoomBan[]
  roomMember    RoomMember[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          Int          @id @default(autoincrement())
  creatorId   String
  activity    String
  slots       Int
  password    String?
  game        String
  createdAt   DateTime     @default(now())
  expiresAt   DateTime     @default(dbgenerated("(current_timestamp() + interval 1 hour)")) @db.DateTime(0)
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  roomBans    RoomBan[]
  roomMembers RoomMember[]

  @@index([creatorId])
  @@index([game])
}

model RoomMember {
  roomId   Int
  userId   String
  joinedAt DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([roomId, userId])
  @@index([userId], map: "RoomMember_userId_fkey")
}

model RoomBan {
  roomId Int
  userId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([roomId, userId])
  @@index([userId], map: "RoomBan_userId_fkey")
}
